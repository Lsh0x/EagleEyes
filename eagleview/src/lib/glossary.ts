const GLOSSARY: Record<string, string> = {
  TCP: 'Transmission Control Protocol: reliable, ordered, connection-oriented transport.',
  UDP: 'User Datagram Protocol: connectionless, best-effort transport.',
  ICMP: 'Internet Control Message Protocol: network diagnostics and errors (IPv4).',
  ICMPv4: 'ICMP for IPv4: ping, errors (dest unreachable, time exceeded, etc.).',
  ICMPv6: 'ICMP for IPv6: ping and control for IPv6 (ND, errors).',
  ARP: 'Address Resolution Protocol: map IP addresses to MAC addresses on LANs.',
  DNS: 'Domain Name System: resolve names to IPs; queries and responses.',
  DoH: 'DNS over HTTPS: DNS messages tunneled over HTTP(S).',
  DoT: 'DNS over TLS: DNS messages over TLS on TCP/853.',
  DHCP: 'Dynamic Host Configuration Protocol: assign IP address/config to hosts.',
  DHCPv6: 'Dynamic Host Configuration Protocol for IPv6.',
  HTTP: 'Hypertext Transfer Protocol: web requests and responses.',
  HTTPS: 'HTTP over TLS (encrypted).',
  TLS: 'Transport Layer Security: encryption and authentication for applications.',
  SSL: 'Old name for TLS; deprecated versions of SSL are insecure.',
  FTP: 'File Transfer Protocol: file transfers; control on TCP/21.',
  FTPS: 'FTP over TLS (implicit on 990, explicit via AUTH TLS).',
  SMTP: 'Simple Mail Transfer Protocol: email sending.',
  SMTPS: 'SMTP secured with TLS (implicit on 465).',
  POP3: 'Post Office Protocol v3: email retrieval.',
  IMAP: 'Internet Message Access Protocol: email access/sync.',
  LDAP: 'Lightweight Directory Access Protocol: directory queries.',
  LDAPS: 'LDAP over TLS (usually TCP/636).',
  SMB: 'Server Message Block (CIFS): Windows file/printer sharing.',
  NetBIOS: 'Legacy name service and datagrams for Windows networking.',
  RDP: 'Remote Desktop Protocol: remote GUI sessions (TCP/3389).',
  SIP: 'Session Initiation Protocol: signaling for VoIP/RTC sessions.',
  RTP: 'Real-time Transport Protocol: carries audio/video media.',
  RTCP: 'RTP Control Protocol: stats/QoS, sender/receiver reports.',
  RTSP: 'Real Time Streaming Protocol: control for streaming servers.',
  QUIC: 'QUIC transport over UDP; basis for HTTP/3.',
  HTTP3: 'HTTP/3 runs over QUIC, improving performance and latency.',
  SSH: 'Secure Shell: secure remote login and port forwarding.',
  Telnet: 'Unencrypted remote terminal (legacy).',
  SNMP: 'Simple Network Management Protocol: monitoring/management.',
  NTP: 'Network Time Protocol: clock synchronization.',
  BGP: 'Border Gateway Protocol: inter-domain routing between networks.',
  OSPF: 'Open Shortest Path First: interior gateway routing protocol.',
  RIP: 'Routing Information Protocol: distance-vector routing (legacy).',
  IGMP: 'Internet Group Management Protocol: IPv4 multicast group control.',
  GRE: 'Generic Routing Encapsulation: tunneling protocol.',
  ESP: 'IPsec Encapsulating Security Payload: encrypted IP payloads.',
  AH: 'IPsec Authentication Header: integrity/auth for IP packets.',
  MPLS: 'Multiprotocol Label Switching: label-switched forwarding.',
  PPPoE: 'Point-to-Point Protocol over Ethernet.',
  PPP: 'Point-to-Point Protocol: L2 framing with LCP/IPCP negotiation.',
  LLMNR: 'Link-Local Multicast Name Resolution (Windows local name lookup).',
  mDNS: 'Multicast DNS: local name discovery (UDP/5353).',
  SSDP: 'Simple Service Discovery Protocol: UPnP discovery (UDP/1900).',
  Kerberos: 'Authentication protocol using tickets (often UDP/TCP 88).',
  STUN: 'Session Traversal Utilities for NAT: discover public address/ports.',
  TURN: 'Traversal Using Relays around NAT: relay media when direct fails.',
  WebSocket: 'Full-duplex messages over a single TCP connection (upgrade from HTTP).',
  Redis: 'In-memory data store; RESP protocol on TCP/6379.',
  Memcached: 'In-memory cache; text/binary protocol on TCP/11211.',
  MQTT: 'Lightweight pub/sub messaging for IoT (TCP/1883).',
  AMQP: 'Advanced Message Queuing Protocol (TCP/5672).',
  STOMP: 'Simple Text Oriented Messaging Protocol.',
  CoAP: 'Constrained Application Protocol over UDP/DTLS (UDP/5683).',
};

export function protoDesc(name: string): string | undefined {
  const key = (name || '').toUpperCase();
  return GLOSSARY[key];
}
